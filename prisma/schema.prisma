// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  role      String   @db.VarChar(20)
  phone     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Add opposite relation fields for Ride
  customerRides Ride[] @relation("CustomerRides")
  riderRides    Ride[] @relation("RiderRides")
}

model Ride {
  id        Int      @id @default(autoincrement())
  vehicle   String   @db.VarChar(20) // 'bike', 'auto', 'cabEconomy', 'cabPremium'
  distance  Float
  pickupAddress   String 
  pickupLatitude  Float
  pickupLongitude Float
  dropAddress     String
  dropLatitude    Float
  dropLongitude   Float
  fare      Float
  customer  User    @relation("CustomerRides", fields: [customerId], references: [id])
  customerId Int
  rider     User?   @relation("RiderRides", fields: [riderId], references: [id])
  riderId   Int?
  status    String   @default("SEARCHING_FOR_RIDER") @db.VarChar(30) // enum-like
  otp       String?  @db.VarChar(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
